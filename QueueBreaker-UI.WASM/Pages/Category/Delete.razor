@page "/category/delete/{Id}"
@attribute [Authorize(Roles = "Admin")]
@inject ICategoryRepository _repo
@inject NavigationManager _navManager
@inject IToastService _toastService
<h3 class="card-title">Are You Sure You Want to Delete This Record?</h3>
<hr />
<br />
@if (!isSuccess)
{
    <ErrorMessage Message="Somewthing Went Wrong WIth the Operation" />
}

@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please Try Again" />
}
else if (Model == null)
{
    <LoadingMessage Message="Loading Category Details" />
}
else
{
    <div class="col-md-4">
        <table class="table table-responsive">
            <tr>
                <td> Name</td>
                <td>@Model.Name</td>
            </tr>


        </table>
        <br />
        @*@if (Model.Categories == null || Model.Categories.Count < 1)
            {
                <div class="alert alert-dismissible alert-secondary">
                    No Books for this Canteeen
                </div>
            }
            else
            {
                <div class="card" style="width: 18rem;">
                    <div class="card-header">
                        <h4>Canteeen's Books</h4>
                    </div>
                    <ul class="list-group list-group-flush">
                        @foreach (var book in Model.Categories)
                        {
                            <li class="list-group-item">@book.Name - @book.Name </li>
                        }
                    </ul>
                </div>
            }*@

    </div>
}
<br />

<button @onclick="DeleteCategory" class="btn btn-danger">
    <span class="oi oi-delete"></span>
    Delete Canteeen
</button>

<button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-media-skip-backward"></span>
    Back To List
</button>


@code {
    [Parameter]
    public string Id { get; set; }

    private Category Model = new Category();
    private bool isSuccess = true;
    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _repo.Get(Endpoints.CategoryEndpoint, id);
    }

    private async Task DeleteCategory()
    {
        isSuccess = await _repo.Delete(Endpoints.CategoryEndpoint, Model.Id);
        if (isSuccess)
        {
            _toastService.ShowSuccess("Category Deleted Successfully", "");
            BackToList();
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/category/");
    }
}
