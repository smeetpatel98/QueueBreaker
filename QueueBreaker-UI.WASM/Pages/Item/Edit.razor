@page "/item/edit/{Id}"
@attribute [Authorize(Roles = "Admin")]
@inject IItemRepository _repo
@inject ICategoryRepository _authorRepo
@inject NavigationManager _navManager
@inject IToastService _toastService
<h3 class="card-title">Edit Item</h3>
<hr />
<br />
@if (!isSuccess)
{
    <ErrorMessage Message="Somewthing Went Wrong With the Operation" />
}

@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please Try Again" />
}
else if (Model == null)
{
    <LoadingMessage Message="Loading Item For Edit" />
}
else
{
<EditForm Model="Model" OnValidSubmit="EditItem">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstname"> Name</label>
        <InputText @bind-Value="Model.Name" class="form-control" id="firstname" />
    </div>
    <div class="form-group">
        <label for="author">Categoryc</label>
        <select @bind="Model.CategoryId" class="form-control" id="category">
            <option value="">-- Select Category --</option>
            @if (Categorys != null)
            {
                foreach (var c in Categorys
                    )
                {
                    <option value="@c.Id">@c.Name</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label for="name">Price</label>
        <InputNumber @bind-Value="Model.Price" class="form-control" id="name" />
    </div>
    <div class="form-group">
        <label for="bookcover">Photo</label>
        <InputFile OnChange="HandleFileSelection" />
        @if (isInvalidFileType)
        {
            <ErrorMessage Message="Please remove the invalid file type and select as new image, or leave this field blank" />
        }
        @if (!string.IsNullOrWhiteSpace(imageDataURL))
        {
            <img src="@imageDataURL" style="height:100px;width:100px" />
        }
        else if (!string.IsNullOrWhiteSpace(Model.Image))
        {
            <img src="@string.Format("data:image/png;base64,{0}", Model.ImageFile)" style="height:100px;width:100px" />
        }
    </div>
    <div class="form-group">
        <label for="name">Comment</label>
        <InputTextArea @bind-Value="Model.Comment" class="form-control" id="Comment" />
    </div>
    <div>
        <label for="Active">Active</label>
        <InputCheckbox @bind-Value="Model.Status" class="form-control custom-checkbox" id="status" />
    </div>

    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Submit Changes
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>
</EditForm>
}


@code {
    [Parameter]
    public string Id { get; set; }

    private Item Model = new Item();
    private bool isSuccess = true;

    private IList<Category> Categorys;
    private IList<Author> Authors;
    private IFileListEntry file;
    private bool isInvalidFileType = false;
    private bool isFileChanged = false;
    private string imageDataURL;
    private MemoryStream msFile;
    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _repo.Get(Endpoints.ItemEndpoint, id);
        Categorys = await _authorRepo.Get(Endpoints.CategoryEndpoint);
    }

    //private async Task EditItem()
    //{
    //    isSuccess = await _repo.Update(Endpoints.ItemEndpoint, Model, Model.Id);
    //    if (isSuccess)
    //    {
    //        _toastService.ShowSuccess("Item Updated Successfully", "");
    //        BackToList();
    //    }

    //}
    private async Task EditItem()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                Model.Image = picName;
                Model.ImageFile = Convert.ToBase64String(msFile.ToArray());
            }
            else if (isFileChanged && file == null)
            {
                Model.Image = string.Empty;
            }

            isSuccess = await _repo.Update(Endpoints.ItemEndpoint, Model, Model.Id);
            if (isSuccess)
            {
                _toastService.ShowWarning("Item Updated Successfully", "");
                BackToList();
            }
        }
    }
    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        isFileChanged = true;
        if (file != null)
        {
            var name = file.Name;
            if (name.Contains("jpg") || name.Contains("png") || name.Contains("jpeg"))
            {
                msFile = new MemoryStream();
                await file.Data.CopyToAsync(msFile);

                var reader = new StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(msFile.ToArray());
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/item/");
    }
}
