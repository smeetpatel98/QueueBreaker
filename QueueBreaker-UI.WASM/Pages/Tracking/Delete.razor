@page "/tracking/delete/{Id}"
@*@attribute [Authorize(Roles = "Administrator")]*@

@inject ITrackingHistoryRepository _repo
@inject IMailBoxRepository _mailrepo
@inject IMailBoxAuthoritiesRepository _authrepo
@inject NavigationManager _navManager
@inject IToastService _toastService

<div class="card">


    <h3 class="card-title text-center">Are You Sure You Want to Delete This Record?</h3>
    <hr />
    <br />
    @if (!isSuccess)
    {
        <ErrorMessage Message="Somewthing Went Wrong With the Operation" />
    }

    @if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
    {
        <ErrorMessage Message="Invalid Selection. Please Try Again" />
    }
    else if (Model == null)
    {
        <LoadingMessage Message="Loading Tracking Details" />
    }
    else
    {
        <div class="col-md-4">
            <table class="table table-responsive">
                <tr>
                    <td>Item BarCode</td>
                    <td>@Model.ItemBarCode</td>
                </tr>
                <tr>
                    <td>Delivery Date</td>
                    <td>@string.Format("{0:MM-dd-yyyy}", Model.DeliveryDate)</td>
                </tr>
                <tr>
            <td>PackageType</td>
            <td>@pac</td>
        </tr>
            </table>
            <br />
            <button @onclick="DeleteTrackingHistory" class="btn btn-danger">
                <span class="oi oi-delete"></span>
                Delete Tracking
            </button>

            <button @onclick="BackToList" class="btn btn-secondary">
                <span class="oi oi-media-skip-backward"></span>
                Back To List
            </button>
        </div>}
    <br />
</div>
<br />


@code { [Parameter]
    public string Id { get; set; }
    public string pac { get; set; }
    public string stat { get; set; }
    public string pmb { get; set; }
    public string contact { get; set; }

    private TrackingHistoryModel Model = new TrackingHistoryModel();
    private bool isSuccess = true;
    private IList<KeyValues> statuses;
    private IList<KeyValues> packages;
    private IList<MailBoxModel> mailboxes;
    private IList<MailBoxAuthoritiesModel> authorities;

    protected override async Task OnInitializedAsync()
    {
        statuses = await _repo.GetEnums(Endpoints.StatusEndpoint);
        packages = await _repo.GetEnums(Endpoints.PackageTypeEndpoint);
        mailboxes = await _mailrepo.Get(Endpoints.MailBoxEndpoint);
        authorities = await _authrepo.Get(Endpoints.MailBoxAuthoritiesEndpoint);
        authorities = authorities.GroupBy(x => x.ContactName).Select(x => x.FirstOrDefault()).ToList();
        int id = Convert.ToInt32(Id);
        Model = await _repo.Get(Endpoints.TrackingHistoryEndpoint, id);

        var pa = Model.PackageType.ToString();
        pac = packages.Where(x => x.Value == pa).Select(x => x.Text).FirstOrDefault();
        //var st = Model.Status.ToString();
        //stat = statuses.Where(x => x.Value == st).Select(x => x.Text).FirstOrDefault();
        pmb = mailboxes.Where(x => x.MailBoxId == Model.MailboxId).Select(x => x.Pmbnumber).FirstOrDefault();
        contact = authorities.Where(x => x.MailBoxAuthoritiesId == Model.MailBoxAuthoritiesId).Select(x => x.ContactName).FirstOrDefault();
    }

    private async Task DeleteTrackingHistory()
    {
        isSuccess = await _repo.Delete(Endpoints.TrackingHistoryEndpoint, Model.TrackingHistoryId);
        if (isSuccess)
        {
            _toastService.ShowSuccess("TrackingHistory Deleted Successfully", "Delete");
            BackToList();
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo($"tracking/edit/{Model.TrackingHeaderId}");
    } }

