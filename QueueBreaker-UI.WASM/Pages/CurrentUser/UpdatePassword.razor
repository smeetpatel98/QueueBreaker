@page "/userprofile/updatepassword/{Id}"

@inject IUserProfileRepository _repo
@inject NavigationManager _navManager
@inject IToastService _toastService

<div class="row">
    <div class="col-md-2"></div>
    <div class="col-md-7">
        <div class="card">
            <h3 class="card-title text-center">Update Password</h3>
            <hr />
            <br />
            @if (!isSuccess)
            {
<ErrorMessage Message="Somewthing Went Wrong With the Operation" />}

            @if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
            {
<ErrorMessage Message="Invalid Selection. Please Try Again" /> }
else if (Model == null)
{
<LoadingMessage Message="Loading UserProfile For Updating Password" /> }
else
{
<div class="card-body">
    <EditForm Model="Model" OnValidSubmit="UpdateUserPassword">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="password">Password</label>
            <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
            <ValidationMessage For="@(() => Model.Password)" />
        </div>
        <div>
            <label for="newpassword">New Password</label>
            <InputText Id="newpassword" type="password" class="form-control" @bind-Value="Model.NewPassword" />
            <ValidationMessage For="@(() => Model.NewPassword)" />
        </div>
        <br />
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Submit Changes
        </button>
        <button onclick="goBack()" type="button" class="btn btn-secondary">
            <span class="oi oi-media-skip-backward"></span>
            Back To List
        </button>
    </EditForm>
</div>}
        </div>
    </div>
</div>

@code { [Parameter]
    public string Id { get; set; }
    public int id { get; set; }

    //private UserProfileModel Model = new UserProfileModel();
    private UpdatePasswordModel Model = new UpdatePasswordModel();
    private bool isSuccess = true;
    bool response = true;

    protected override async Task OnInitializedAsync()
    {
        id = Convert.ToInt32(Id);
        //Model = await _repo.Get(Endpoints.UserProfileEndpoint, id);
    }

    private async Task UpdateUserPassword()
    {
        Model.ProfileId = id;
        isSuccess = await _repo.UpdateUserPassword(Model);
        if (isSuccess)
        {
            _toastService.ShowSuccess("Password Updated Successfully", "");
        }
        if (response)
        {
            _navManager.NavigateTo("/logout");
        }

    }

    //private void BackToList()
    //{
    //    _navManager.NavigateTo("/userprofile/");
    //} 
    }
